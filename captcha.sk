on load:
  load map classes

import:
  com.btk5h.skriptmirror.util.lookup.DelegateMapRenderer
  com.btk5h.skriptmirror.util.lookup.DelegatingMapRenderer
  javax.imageio.ImageIO
  java.io.File
  java.awt.Canvas
  java.awt.Color
  java.awt.image.BufferedImage
  java.awt.Graphics2D
  java.awt.RenderingHints
  java.awt.RenderingHints$Key
  java.awt.Component
  org.bukkit.Bukkit
  org.bukkit.event.server.MapInitializeEvent
  org.bukkit.inventory.ItemStack
  org.bukkit.Material

function getCaptchaImage(string: string) :: object:
  set {_image} to new BufferedImage(128, 128, BufferedImage.TYPE_INT_RGB)

  set {_canvas} to new Canvas()
  {_canvas}.setSize(128, 128)
  
  set {_graphics} to {_image}.getGraphics()
  {_graphics}.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)
  {_canvas}.paint({_graphics})

  {_graphics}.setColor(Color.WHITE)
  {_graphics}.fillRect(0, 0, 128, 128)

  {_graphics}.setColor(Color.BLACK)
  {_graphics}.drawString({_string}, 50, 50)
  
  #set {_azex} to ImageIO.read(new File("azer.png"))
  #{_graphics}.drawImage({_azex}, 0, 0, {_})
  
  return {_image}

function getCaptchaMap(image: object) :: item:
  create new section with {_proxy}, {_map-view}, {_canvas}, {_player} stored in {_handles::render}:
    {_canvas}.drawImage(0, 0, {_image})
  set {_delegate} to proxy instance of DelegateMapRenderer using {_handles::*}
  set {_renderer} to new DelegatingMapRenderer({_delegate})
  
  set {_item} to filled map
  set {_meta} to {_item}.getItemMeta()
  {_meta}.setMapId(1.shortValue())
  set {_view} to {_meta}.getMapView()

  {_view}.getRenderers().clear()
  {_view}.addRenderer({_renderer})
  {_view}.setTrackingPosition(false)
  {_meta}.setMapView({_view})

  {_item}.setItemMeta({_meta})
  return {_item}

function getRandomString(length: integer) :: string:
  set {_chars::*} to "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" split at ""
  delete {_chars::%size of {_chars::*}%}
  loop {_length} times:
    add random element out of {_chars::*} to {_return::*}
  return join {_return::*} with ""

command img_test:
  trigger:
    set player's tool to getCaptchaMap(getCaptchaImage(getRandomString(7)))
    #set {_output} to new File("saved.png")
    #ImageIO.write({_image}"png", {_output})